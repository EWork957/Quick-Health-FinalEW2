WORKING ONLYHTML~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Quick Health</title>    <link rel="stylesheet" href="styles.css"></head><body>    <div class="tiledBackground"></div>    <div class="container">        <!--IPAD-->        <div class="ipad-mini">            <!--HEADER-->            <div class="header">                <h1>QUICK HEALTH</h1>                <hr class="separator">             </div>            <!--FOOTER-->            <div class="footer">                <p>Email: info@quickhealth.com</p>                <p>Phone: +1 (123) 456-7890</p>            </div>        </div>        <!--BUTTON CLASS-->            <div class="BurnsCutsButtons">                <!--BURNS NAV-->                <div id="BmyNav" class="Boverlay">                    <a href="javascript:void(0)" class="Bclosebtn" onclick="BcloseNav()">&times;</a>                    <div class="Boverlay-content">                      <a class="BNavTitleA">WHAT CAN YOU ASK</a>                      <a class="BNavTitle"> </a>                      <button class="accordion">"How do I treat a minor burn?"</button>                      <div class="panel">                        <p>For minor burns, run cool water over the burned area for several minutes to reduce pain and swelling. Apply aloe vera gel or a moisturizer to soothe the burn. If the burn is severe or covers a large area, seek medical attention.</p>                      </div>                                            <button class="accordion">"I spilt a hot liquid on myself, what do I do?"</button>                      <div class="panel">                        <p>If you have spilled a hot drink on your leg, move away from the source of heat. Run cool water over the burn for several minutes, and then cover it with a clean, dry cloth or bandage.</p>                      </div>                                            <button class="accordion">"I burned my arm on a pan. What should I do?"</button>                      <div class="panel">                        <p>If you've burned your hand on a hot pan, immediately run cool water over the burn for at least 10 minutes. After cooling, cover the burn with a clean, dry cloth and seek medical attention if it's severe.</p>                      </div>                      <button class="accordion">"How do I treat a major burn on my arm?"</button>                      <div class="panel">                        <p>"For a major burn, seek emergency medical assistance immediately. While waiting for medical help, remove any clothing or jewelry near the burn area, but do not attempt to remove anything stuck to the skin. Cool the burn with cool, running water for at least 20 minutes, covering it with a clean, dry cloth or sterile bandage if possible. Keep the affected area elevated, and monitor for signs of shock or difficulty breathing. Remember to seek professional medical help as soon as possible."</p>                      </div>                    </div>                    <button id="aiButtonBurns" class="centered-button">SPEAK WITH AI</button>                    </div>                  </div>                <!--CUTS NAV-->                  <div id="CmyNav" class="Coverlay">                    <a href="javascript:void(0)" class="Cclosebtn" onclick="CcloseNav()">&times;</a>                    <div class="Coverlay-content">                        <a class="BNavTitle">WHAT CAN YOU ASK</a>                        <a class="BNavTitle"> </a>                      <button class="accordion">"I got a cut on my finger. How do I treat it?"</button>                      <div class="panel">                        <p>Wash the wound gently with soap and water. Apply pressure with a clean cloth to stop the bleeding, and then cover the cut with a bandage.</p>                      </div>                                            <button class="accordion">"What's the best way to stop bleeding from a cut?"</button>                      <div class="panel">                        <p>Stop bleeding from the cut by applying gentle pressure with a clean cloth or bandage for a few minutes. Elevating the cut above the heart can also help reduce bleeding. Wash the wound gently with soap and water. Apply pressure with a clean cloth to stop the bleeding, and then cover the cut with a bandage.</p>                      </div>                                            <button class="accordion">"How do I treat a deep cut on my hand?"</button>                      <div class="panel">                        <p>If the cut is deep or bleeding heavily, seek medical attention immediately. Wash the wound with soap and water. Apply pressure to stop the bleeding and cover the cut with a clean bandage until help arrives. </p>                      </div>                      <button class="accordion">"I accidentally cut my finger off while chopping vegetables."</button>                      <div class="panel">                        <p>If you've accidentally severed a finger, it's crucial to act quickly and seek emergency medical attention immediately. First, apply direct pressure to the wound to control bleeding. Next, retrieve the finger and handle it as little as possible to avoid damage. Rinse the finger gently with clean water if available. Remember to seek emergency medical attention immediately, bringing the severed finger with you. Time is critical so act swiftly and follow medical advice closely."</p>                      </div>                    </div>                    <button id="aiButtonCuts" class="centered-button">SPEAK WITH AI</button>                    </div>                  </div>                  <!--BUTTONS-->                  <div class="button-container">                    <button class="burns-button" onclick="BopenNav()"onclick="toggleShadow()">                        <img src="flame.png" alt="Flame icon" class="flame-icon">                        BURNS                    </button>                    <button class="cuts-button" onclick="CopenNav()"onclick="toggleShadow()">                        <img src="cut.png" alt="Cut icon" class="cut-icon">                        CUTS                    </button>                </div>            </div>            <!-- Speech Recognition Button -->            <button id="speechRecognitionButton" class="centered-button">START SPEECH RECOGNITION</button>    </div>    <script src="script.js">         // Function to handle button click event         function handleClick() {            // Prompt the user for a question            const question = prompt("Please enter your medical question:");            // Check if the user entered a question            if (question) {                // Send the question to the server                fetch('http://localhost:3000/webhook', {                    method: 'POST',                    headers: {                        'Content-Type': 'application/json'                    },                    body: JSON.stringify({ question: question })                })                    .then(response => {                        if (!response.ok) {                            throw new Error('Network response was not ok');                        }                        return response.json();                    })                    .then(data => {                        // Handle the response from the server                        alert("Response from server: " + JSON.stringify(data));                    })                    .catch(error => {                        console.error('Error:', error);                        alert("Error occurred while processing your request. Please try again later.");                    });            } else {                alert("Please enter a valid question.");            }        }        // Function to handle speech recognition button click event        function handleSpeechRecognition() {            // Display listening alert            alert("Listening...");            // Start speech recognition process            // Your code for starting speech recognition goes here            // Simulate sending question to Dialogflow (replace with actual code)            setTimeout(() => {                // Display alert to indicate the question is sent                alert("Question sent to Dialogflow.");            }, 2000); // Adjust delay as needed        }        // Add event listener to the AI button        document.getElementById('aiButton').addEventListener('click', handleClick);        // Add event listener to the speech recognition button        document.getElementById('speechRecognitionButton').addEventListener('click', handleSpeechRecognition);    </script></body></html>CSS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/* BODY */body{  background-color: #d7e6fb;}/* CONTAINER */.container {  max-width: 280px;  max-height: 388px;   margin: 0 auto;   padding: 0px;   display: flex;   flex-direction: column;  justify-content: center;  align-items: center; }/* HEADER */.header {  text-align: center;  font-size: 25px;  width: 500px;  margin: -15px;}.separator {  width: 100%;}/* FOOTER */.footer {  position: fixed;  left: 0;  bottom: 0;  width: 100%;  background-color: rgb(101, 101, 101);  color: white;  text-align: center;}/* AI BUTTON */.centered-button {  position: absolute;   bottom: 90px;   left: 50%;   font-size: 15px;  transform: translateX(-50%);   width: 200px;   padding: 30px;   background-color: #0056b3;   color: white;   border: none;   border-radius: 50px;   cursor: pointer;   transition: background-color 0.3s, transform 0.2s ease-in-out; }.centered-button:hover {  background-color: #003366 }.centered-button:active {  background-color: #0f2a3d; }/* SQUARE BUTTON */.BurnsCutsButtons {  position: relative;  margin-top: 10%;}.button-container {  display: flex;  flex-direction: column;  justify-content: center;  align-items: center;}.burns-button, .cuts-button {  width: 400px;  height: 150px;  margin-bottom: 10px;  padding: 10px;  border-radius: 80px;  background-color: #1E90FF;  color: white;  font-size: 30px;  text-align: center;  cursor: pointer;  transition: background-color 0.3s, transform 0.2s ease-in-out, box-shadow 0.3s;  background: linear-gradient(to right, #0daee5, #0fc8d5);  box-shadow: 0 10px 5px rgba(0, 0, 0, 0.2);  margin-top: 10px;}.burns-button:hover {  background: linear-gradient(to right, #0fc8d5, #0daee5);}.cuts-button:hover {  background: linear-gradient(to right, #0fc8d5, #0daee5);}.no-shadow {  box-shadow: none; }.flame-icon {  position: absolute;  width: 80px; /* Adjust the size of the image as needed */  height: auto;  margin-left: -120px;  margin-top: -40px;}.cut-icon {  position: absolute;  width: 120px; /* Adjust the size of the image as needed */  height: auto;  margin-left: -140px;  margin-top: -30px;}/* BURNS OVERLAY */.Boverlay {    height: 100%;  width: 0;  position: fixed;  z-index: 1;   left: 0;  top: 0;  background-color: rgb(0,0,0);   background-color: rgba(0,0,0, 0.9);   overflow-x: hidden;   transition: 0.5s;}.Boverlay-content {  position: relative;  top: 25%;   width: 100%;   text-align: center;   margin-top: 30px; }.Boverlay a {  padding: 8px;  text-decoration: none;  font-size: 36px;  color: #818181;  display: block;  transition: 0.3s; }.Boverlay a:hover, .Boverlay a:focus {  color: #f1f1f1;}.Boverlay .Bclosebtn {  position: absolute;  top: 20px;  right: 45px;  font-size: 60px;}@media screen and (max-height: 450px) {  .Boverlay a {font-size: 20px}  .Boverlay .Bclosebtn {    font-size: 40px;    top: 15px;    right: 35px;  }}/* CUTS OVERLAY */.Coverlay {  height: 100%;  width: 0;  position: fixed;  z-index: 1;  left: 0;  top: 0;  background-color: rgb(0,0,0);  background-color: rgba(0,0,0, 0.9);  overflow-x: hidden;   transition: 0.5s; }.Coverlay-content {  position: relative;  top: 25%;   width: 100%;  text-align: center;   margin-top: 30px; }.Coverlay a {  padding: 8px;  text-decoration: none;  font-size: 36px;  color: #818181;  display: block;   transition: 0.3s; }.Coverlay a:hover, .Coverlay a:focus {  color: #f1f1f1;}.Coverlay .Cclosebtn {  position: absolute;  top: 20px;  right: 45px;  font-size: 60px;}@media screen and (max-height: 450px) {  .Coverlay a {font-size: 20px}  .Coverlay .Cclosebtn {    font-size: 40px;    top: 15px;    right: 35px;  }}.BNavTitleA{  margin-top: -100px;}.accordion {  background-color: #d7e6fb;  color: #444;  cursor: pointer;  padding: 18px;  width: 90%;  border: none;  text-align: left;  outline: none;  font-size: 18px;  transition: 0.4s;}.active, .accordion:hover {  background-color: #84b7ff;}.panel {  padding: 0 18px;  background-color: rgb(196, 196, 196);  max-height: 0;  overflow: hidden;  transition: max-height 0.2s ease-out;  width: 86.8%;  margin-left: 57px;  font-size: 18px;}SCRIPT~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~// Initialize speech recognitionconst recognition = new webkitSpeechRecognition();recognition.continuous = false;recognition.interimResults = false;// Handle button click event for speech recognitiondocument.getElementById('speechRecognitionButton').addEventListener('click', function() {    recognition.start();    alert("Listening... Speak your question.");});// Event listener for speech recognition resultrecognition.onresult = function(event) {    const result = event.results[0][0].transcript;    const confidence = event.results[0][0].confidence;    const questionnz1 = result;    // Send the question to Dialogflow    sendToDialogflow(questionnz1);};// Event listener for speech recognition errorrecognition.onerror = function(event) {    alert("Error occurred during speech recognition. Please try again.");    recognition.stop();};// Function to send the question to Dialogflowasync function sendToDialogflow(question) {    // Send the question to the server    fetch('http://localhost:3000/webhook', {        method: 'POST',        headers: {            'Content-Type': 'application/json'        },        body: JSON.stringify({ question: question })    })    .then(response => {        if (!response.ok) {            throw new Error('Network response was not ok');        }        return response.json();    })    .then(data => {        // Handle the response from the server        const responseText = data.response;        // Speak the response out loud        speakResponse(responseText);    })    .catch(error => {        console.error('Error:', error);        alert("Error occurred while processing your request. Please try again later.");    });}// Function to send the question to Dialogflowasync function sendToDialogflow(question) {    // Send the question to the server    fetch('http://localhost:3000/webhook', {        method: 'POST',        headers: {            'Content-Type': 'application/json'        },        body: JSON.stringify({ question: question })    })    .then(response => {        if (!response.ok) {            throw new Error('Network response was not ok');        }        return response.json();    })    .then(data => {        // Handle the response from the server        const responseText = data.response;        // Speak the response out loud        speakResponse(responseText);        // Show an alert with the response        alert("Response from server: " + responseText);    })    .catch(error => {        console.error('Error:', error);        alert("Error occurred while processing your request. Please try again later.");    });}// Function to speak the response out loudfunction speakResponse(responseText) {    const utterance = new SpeechSynthesisUtterance(responseText);    speechSynthesis.speak(utterance);}// BURNS NAVfunction BopenNav() {    document.getElementById("BmyNav").style.width = "100%";}function BcloseNav() {    document.getElementById("BmyNav").style.width = "0%";}// CUTS NAVfunction CopenNav() {    document.getElementById("CmyNav").style.width = "100%";}function CcloseNav() {    document.getElementById("CmyNav").style.width = "0%";}function toggleShadow() {    var burnsButton = document.getElementById('burnsButton');    burnsButton.classList.toggle('no-shadow');}var acc = document.getElementsByClassName("accordion");var i;for (i = 0; i < acc.length; i++) {  acc[i].addEventListener("click", function() {    this.classList.toggle("active");    var panel = this.nextElementSibling;    if (panel.style.maxHeight) {      panel.style.maxHeight = null;    } else {      panel.style.maxHeight = panel.scrollHeight + "px";    }  });}SERVER~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~const express = require('express');const cors = require('cors');const axios = require('axios');const { GoogleAuth } = require('google-auth-library');const app = express();const PORT = 3000;app.use(cors());// Define the accessToken variablelet accessToken = '';// Load the service account key JSON fileconst serviceAccount = require('./health-chatbot-420906-ce340fafb930.json');// Extract private key and client email from the JSONconst privateKey = serviceAccount.private_key;const clientEmail = serviceAccount.client_email;// Configure the GoogleAuth clientconst auth = new GoogleAuth({  credentials: {    private_key: privateKey,    client_email: clientEmail  },  scopes: ['https://www.googleapis.com/auth/dialogflow']});// Obtain an access token using the Google Auth libraryauth.getAccessToken()  .then(token => {    // Assign the obtained access token to the accessToken variable    accessToken = token;    // Log the access token for debugging purposes    console.log('Access Token:', accessToken);  })  .catch(err => {    console.error('Error obtaining access token:', err);  });// Middlewareapp.use(express.json());app.use(cors());// Function to send the question to Dialogflowasync function sendToDialogflow(question, accessToken) {  const projectId = 'health-chatbot-420906';  const sessionId = '135246';  const languageCode = 'en-US';  const url = `https://dialogflow.googleapis.com/v2/projects/${projectId}/agent/sessions/${sessionId}:detectIntent`;  const requestBody = {    queryInput: {      text: {        text: question,        languageCode: languageCode,      },    },  };  const config = {    headers: {      'Content-Type': 'application/json',      'Authorization': `Bearer ${accessToken}`,    },  };  try {    const response = await axios.post(url, requestBody, config);    return response.data;  } catch (error) {    console.error('Error sending request to Dialogflow:', error);    throw new Error('Failed to send request to Dialogflow');  }}// Handle POST requests to /webhook endpointapp.post('/webhook', async (req, res) => {  try {    const question = req.body.question;    if (!question) {      throw new Error('Question is required');    }    // Send the question to Dialogflow using the accessToken    const dialogflowResponse = await sendToDialogflow(question, accessToken);    // Extract the response from Dialogflow    const fulfillmentText = dialogflowResponse.queryResult.fulfillmentText;    // Send the response back to the client    res.status(200).json({ response: fulfillmentText });  } catch (error) {    console.error('Error handling webhook request:', error);    res.status(500).json({ error: 'Internal Server Error' });  }});// Start the serverapp.listen(PORT, () => {  console.log(`Server is running on http://localhost:${PORT}`);});